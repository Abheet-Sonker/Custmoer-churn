# -*- coding: utf-8 -*-
"""Churn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q8nPQ4qF801b0N_i9HKkbhbmEc76duZ4
"""

import numpy as np
import pandas as pd
import streamlit as st
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Step 1: Generate Synthetic Dataset (50 instances)
np.random.seed(42)
data = {
    'Customer_ID': np.arange(1, 51),
    'Tenure': np.random.randint(1, 36, 50),
    'Usage_Frequency': np.random.randint(1, 30, 50),
    'Customer_Satisfaction_Score': np.random.randint(1, 11, 50),
    'Competitor_Ads_Exposure': np.random.choice([0, 1], 50),
    'Service_Complaints': np.random.randint(0, 5, 50),
    'Promotional_Offer_Acceptance': np.random.choice([0, 1], 50),
    'Price_Sensitivity': np.random.randint(1, 6, 50),
    'Contract_Type': np.random.choice([1, 2, 3], 50),
    'Churn_Label': np.random.choice([0, 1], 50)
}

df = pd.DataFrame(data)

# Step 2: Markov Chain Transition Matrix (Simplified for Churn Prediction)
transition_matrix = np.array([[0.8, 0.2],  # Loyal -> Loyal (80%), Loyal -> Churn (20%)
                              [0.4, 0.6]]) # Churn -> Loyal (40%), Churn -> Churn (60%)

# Compute Markov-based churn probability
df['Markov_Churn_Probability'] = df['Churn_Label'].apply(lambda x: transition_matrix[x][1])

# Step 3: Train Logistic Regression Model
features = ['Tenure', 'Usage_Frequency', 'Customer_Satisfaction_Score',
            'Competitor_Ads_Exposure', 'Service_Complaints',
            'Promotional_Offer_Acceptance', 'Price_Sensitivity', 'Contract_Type',
            'Markov_Churn_Probability']
X = df[features]
y = df['Churn_Label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Step 4: Model Evaluation
accuracy = accuracy_score(y_test, y_pred)

# Streamlit App
st.title("Customer Migration Prediction")
st.write("Predict the likelihood of customer migration using Markov Chain & Logistic Regression")

st.dataframe(df.head(50))

st.sidebar.header("Enter Customer Details")
tenure = st.sidebar.slider("Tenure (Months)", 1, 36, 12)
usage = st.sidebar.slider("Usage Frequency", 1, 30, 15)
satisfaction = st.sidebar.slider("Customer Satisfaction Score", 1, 10, 5)
ads_exposure = st.sidebar.selectbox("Competitor Ads Exposure", [0, 1])
complaints = st.sidebar.slider("Service Complaints", 0, 5, 1)
promotions = st.sidebar.selectbox("Promotional Offer Acceptance", [0, 1])
price_sensitivity = st.sidebar.slider("Price Sensitivity", 1, 5, 3)
contract_type = st.sidebar.selectbox("Contract Type", [1, 2, 3])

# Compute Markov Probability for new input
churn_prob = transition_matrix[1][1] if complaints > 2 else transition_matrix[0][1]

# Predict
input_data = np.array([[tenure, usage, satisfaction, ads_exposure, complaints,
                         promotions, price_sensitivity, contract_type, churn_prob]])

prediction = model.predict(input_data)[0]
probability = model.predict_proba(input_data)[0][1]

st.subheader("Prediction Result")
if prediction == 1:
    st.error(f"The customer is likely to migrate with a probability of {probability:.2f}")
else:
    st.success(f"The customer is likely to stay with a probability of {1 - probability:.2f}")

st.subheader("Model Accuracy")
st.write(f"Logistic Regression Model Accuracy: {accuracy * 100:.2f}%")